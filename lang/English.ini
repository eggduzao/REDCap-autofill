; Autofill EM
; config.json
module_name = "Autofill"
module_desc = "A REDCap external module providing action tags that allow filling of empty fields with default values."
module_docs = "README.md"
config_jsdebug = "Output debug information to the browser console"
config_errors = "Show autofill configuration errors on data entry and survey pages"
; Widget labels
widget_autofilllabel = "Autofill"
widget_clearlabel = "Reset"
; Errors
invalid_parameters = "Autofill: Invalid parameters in field '{0}'."
invalid_for_tab = "Autofill: Invalid use of {0} in field '{1}'. It is only supported on fields of type 'Dropdown'."
; Action Tag Descriptions
atdesc_autofill_value = "This defines the value a field should be set to when the <i>Autofill</i> button inserted by the <code>@AUTOFILL-FORM</code> or <code>@AUTOFILL-SURVEY</code> action tag is clicked. Use this action tag on each field that should be filled. The basic syntax is <code>@AUTOFILL-VALUE=\"value\"</code>. The value must correspond to the type of the field (e.g. a number for number-validated field, a date in the correct format for a date field, coded values for dropdowns, radios, checkboxes). Some field types are not supported: Calculated Field, Signature, File Upload, Descriptive Text. To set multiple checkboxes, provide a comma-separated list of values. For more advanced use cases, the extended syntax can be used:<br><code>
@AUTOFILL-VALUE={<br>
&nbsp;&nbsp;\"value\": \"5\",<br>
&nbsp;&nbsp;\"clear\": \"2\",<br>
&nbsp;&nbsp;\"overwrite\": true,<br>
&nbsp;&nbsp;\"group\": \"Fives\"<br>
}</code></><br>
Here, the (checkbox) value is set to 5, while the checkbox with value 2 is cleared (<code>clear</code> is only valid for checkboxes). <code>overwrite</code> determines whether the any pre-existing valud should be overwritten by the new value (the default is to not overwrite any pre-existing values). The <code>group</code> field denotes that this autofill value belongs to a group and will only be set when the correspoding <i>Autofill</i> button is pressed (in case the same field should respond to different <i>Autofill</i> buttons, then add multiple <code>@AUTOFILL-VALUE</code> tags with different <code>group</code> values)." 
atdesc_autofill_form = "This action tag defines the placement of the <i>Autofill</i> widget (i.e. a control with buttons for the user to click in order to initiate the autofill process). The button will be added to the end of the field's label on a data entry form (use <code>@AUTOFILL-SURVEY</code> to add a button to a survey page). The basic syntax is <code>@AUTOFILL-FORM</code> (without parameter) or <code>@AUTOFILL-FORM=\"group\"</code> (i.e., specifying the group -or comma-separated groups- of <code>@AUTOFILL-VALUE</code> tags to be activated). More advanced syntax options include:
<p><code>@AUTOFILL-FORM=\"GroupA,GroupB:some-element-id\"</code><br>
Here, the <i>Autofill</i> widget will be added inside an HTML element with the id <code>some-element-id</code> (this resembles field embedding and allows you to bring the <i>Autofill</i> widget to a specific location) and trigger all autofills in groups <code>GroupA</code> and <code>GroupB</code>.</p>
<p><code>@AUTOFILL-FORM={<br>
&nbsp;&nbsp;\"groups\": [ \"group1\", \"group2\" ],<br>
&nbsp;&nbsp;\"target\": \"id\",<br>
&nbsp;&nbsp;\"autofill\": true|false,<br>
&nbsp;&nbsp;\"autofillLabel\": \"Autofill Button Label\",<br>
&nbsp;&nbsp;\"clear\": true,<br>
&nbsp;&nbsp;\"clearLabel\": \"Reset\",<br>
&nbsp;&nbsp;\"clearStyle\": \"background-color:red\",<br>
&nbsp;&nbsp;\"delimiter\": \" \",<br>
}</code><br>
Here, using the JSON syntax, two buttons are added, one labeled <i>Autofill Button Label</i> and next to it, separated by a space, a <i>Clear</i> button with red background, inside an element with id <code>id</code>. The buttons act on autofill groups <code>group1</code> and <code>group2</code>.</p>
The full list of supported parameters (all optional) is:<ul>
<li><code>groups</code>: An array of group names (must be an array, even for a single group).</li>
<li><code>target</code>: When specified, the <i>Autofill</i> widget is rendered as last child of the element with the given id (default render position is at the end of the label portion of the field with the action tag).</li>
<li><code>autofill</code>: When set to <code>true</code>, adds an <i>Autofill</i> button that will execute the autofill (default: <code>true</code>).
<li><code>autofillLabel</code>: The label of the button (supports HTML) - (default: <i>Autofill</i>).</li>
<li><code>autofillStyle</code>: CSS style that is output in the button's style attribute (default: empty).</li>
<li><code>autofillClass</code>: Class names (space-delimited) to be added to the button (default: empty).</li>
<li><code>clear</code>: When set to </code>true</code>, adds a <i>Clear</i> button that will reset all affected fields (default: </code>false</code>).</li>
<li><code>clearLabel</code>: The label of the clear button (supports HTML)  (default: <i>Reset</i>).</li>
<li><code>clearStyle</code>: CSS style that is output in the button's style attribute (default: empty).</li>
<li><code>clearClass</code>: Class names (space-delimited) to be added to the button (default: empty).</li>
<li><code>delimiter</code>: The delimiter between the <i>Autofill</i> and <i>Clear</i> buttons (supports HTML) (default: space).</li>
<li><code>before</code>: This is output before the <i>Autofill</i> button (supports HTML) (default: empty).</li>
<li><code>after</code>: This is output after the <i>Autofill</i> button (supports HTML) (default: empty).</li>
</ul>"
atdesc_autofill_form_onload = "This action tag defines whether autofills should be performed <b>before rendering</b> a form (or survey, when its survey-specific variant is used). For multi-page surveys, this will be peformed at the initial rendering of the first survey page only. An additional event will be logged specifying which fields were set through autofill.
<p>Note: This type of autofill will only ever be applied to when the form status is not grey (i.e., when the instrument <b>has</b> been saved before) and the form or record is not locked. Furthermore, when unlocking a locked form, on-load autofill will not apply without re-loading the form. If you want to set a value for a freshly loaded form, use the <code>@DEFAULT</code> action tag.</p><p>Supported syntax variants are: <code>@AUTOFILL-FORM-ONLOAD</code> (no parameters, trigger all autofills not in named groups), <code>@AUTOFILL-FORM-ONLOAD=\"group1,group2\"</code> (a comma-separated list of group names), and <code>@AUTOFILL-FORM-ONLOAD={ \"groups\": [ \"group1\", \"group2\" ] }</code> (extended JSON syntax).</p>"
atdesc_autofill_form_onsave = "This action tag defines whether autofill should be performed <b>after saving</b> a form (or survey, when its survey-specific variant is used). For multi-page surveys, this will only apply after the final submission, and not for each page. An additional event will be logged specifying which fields were set through autofill.<p>Note: Autofill gets applied <b>before</b> alerts are triggered!</p><p>The supported syntax is the same as with <code>@AUTOFILL-FORM-ONLOAD</code>.</p>"
atdesc_autofill_survey = "See <code>@AUTOFILL-FORM</code> for a description of this action tag."
atdesc_autofill_survey_onload = "See <code>@AUTOFILL-FORM-ONLOAD</code> for a description of this action tag."
atdesc_autofill_survey_onsave = "See <code>@AUTOFILL-FORM-ONSAVE</code> for a description of this action tag."
atdesc_autotab = "This action tag works for fields of type <b>dropdown</b> only. When used on a dropdown field, the focus will move to the next field (or a specified target) as soon as the value of the field changes. This may be useful when large amounts of fields have to be filled where each field has only a limited number of options, each accessible directly with a distinct keystroke. Use as:
<ul><li><code>@AUTOTAB</code> Behaves like pressing the tab key</li>
<li><code>@AUTOTAB=\"field\"</code> Moves focus to the named field</li>
<li><code>@AUTOTAB=\":selector\"</code> Moves focus to any element on the page that is matched by 'selector' (the colon is not part of the selector)</li></ul>"
atdesc_nextfocus = "This action tag can be used on any field. When this field loses focus, the specified field (or any element by way of a CSS selector) gets the focus. Use with care!
<ul><li><code>@NEXTFOCUS=\"field\"</code> Moves focus to the named field</li>
<li><code>@NEXTFOCUS=\":selector\"</code> Moves focus to any element on the page that is matched by 'selector' (the colon is not part of the selector)</li></ul>"